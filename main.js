/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PlexWatchlistPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  feedUrl: "",
  folderPath: ""
};
var PlexWatchlistPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new PlexWatchlistSettingTab(this.app, this));
    this.checkFeed();
    this.startCheckingFeed();
  }
  onunload() {
    console.log("Unloading Plex Watchlist Plugin");
    clearInterval(this.interval);
  }
  startCheckingFeed() {
    this.interval = setInterval(() => this.checkFeed(), 36e5);
  }
  async checkFeed(url) {
    const { feedUrl, folderPath } = this.settings;
    const currentUrl = url || feedUrl;
    if (currentUrl) {
      try {
        const response = await fetch(currentUrl);
        const text = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(text, "application/xml");
        const items = doc.querySelectorAll("item");
        console.log(`Number of items in the RSS feed: ${items.length}`);
        const shows = await Promise.all(
          Array.from(items).map(async (item, index) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p;
            const title = (_b = (_a = item.querySelector("title")) == null ? void 0 : _a.textContent) != null ? _b : "";
            const link = (_d = (_c = item.querySelector("link")) == null ? void 0 : _c.textContent) != null ? _d : "";
            const pubDate = (_f = (_e = item.querySelector("pubDate")) == null ? void 0 : _e.textContent) != null ? _f : "";
            const description = (_h = (_g = item.querySelector("description")) == null ? void 0 : _g.textContent) != null ? _h : "";
            const category = (_j = (_i = item.querySelector("category")) == null ? void 0 : _i.textContent) != null ? _j : "";
            const thumbnail = item.querySelector(
              "media\\:thumbnail, thumbnail"
            );
            const poster = thumbnail ? thumbnail.getAttribute("url") : "";
            const keywords = (_l = (_k = item.querySelector("media\\:keywords")) == null ? void 0 : _k.textContent) != null ? _l : "";
            const rating = (_n = (_m = item.querySelector("media\\:rating")) == null ? void 0 : _m.textContent) != null ? _n : "";
            const guid = (_p = (_o = item.querySelector("guid")) == null ? void 0 : _o.textContent) != null ? _p : "";
            const year = new Date(pubDate).getFullYear();
            return {
              title,
              link,
              pubDate,
              description,
              category,
              poster,
              keywords,
              rating,
              guid,
              year
            };
          })
        );
        await this.updateWatchlist(shows, folderPath);
        const nextLink = doc.querySelector('link[rel="next"]');
        if (nextLink) {
          const nextUrl = nextLink.getAttribute("href");
          if (nextUrl) {
            console.log("Next URL:", nextUrl);
            await this.checkFeed(nextUrl);
          }
        }
      } catch (error) {
        console.error("Error fetching or parsing RSS feed:", error);
      }
    }
  }
  async updateWatchlist(shows, folderPath) {
    try {
      const showsFolderPath = (0, import_obsidian.normalizePath)(`${folderPath}/shows`);
      const moviesFolderPath = (0, import_obsidian.normalizePath)(`${folderPath}/movies`);
      const foldersExist = await Promise.all([
        this.app.vault.adapter.exists(showsFolderPath),
        this.app.vault.adapter.exists(moviesFolderPath)
      ]);
      if (!foldersExist[0]) {
        await this.app.vault.createFolder(showsFolderPath);
      }
      if (!foldersExist[1]) {
        await this.app.vault.createFolder(moviesFolderPath);
      }
      for (let index = 0; index < shows.length; index++) {
        const show = shows[index];
        const targetFolderPath = show.category.toLowerCase() === "movie" ? moviesFolderPath : showsFolderPath;
        const filePath = (0, import_obsidian.normalizePath)(
          `${targetFolderPath}/${show.title.replace(
            /[\/\?<>\\:\*\|":]/g,
            "_"
          )}.md`
        );
        let file = this.app.vault.getAbstractFileByPath(
          filePath
        );
        if (!file) {
          file = await this.app.vault.create(filePath, "");
        }
        let content = "---\n";
        content += `title: ${show.title}
`;
        content += `link: ${show.link}
`;
        content += `pubDate: ${show.pubDate}
`;
        content += `description: ${show.description}
`;
        content += `category: ${show.category}
`;
        content += `poster: ${show.poster}
`;
        content += `keywords: ${show.keywords}
`;
        content += `rating: ${show.rating}
`;
        content += `guid: ${show.guid}
`;
        content += `year: ${show.year}
`;
        content += "---\n";
        await this.app.vault.modify(file, content);
      }
      await this.updateWatchFile(folderPath);
    } catch (error) {
      console.error("Error updating watchlist file:", error);
    }
  }
  async updateWatchFile(folderPath) {
    const watchFilePath = (0, import_obsidian.normalizePath)(`${folderPath}/watch.md`);
    let watchFile = this.app.vault.getAbstractFileByPath(
      watchFilePath
    );
    if (!watchFile) {
      watchFile = await this.app.vault.create(watchFilePath, "");
    }
    let watchFileContent = "---\n";
    watchFileContent += "cssclasses: cards, cards-cover, cards-2-3, table-max\n";
    watchFileContent += "---\n\n";
    watchFileContent += "```dataview\n";
    watchFileContent += "table without id\n";
    watchFileContent += '	("![](" + poster + ")") as Poster,\n';
    watchFileContent += "	file.link as Title,\n";
    watchFileContent += "	string(year) as Year,\n";
    watchFileContent += '	pubDate as "Date Added"\n';
    watchFileContent += 'from "plex/movies"\n';
    watchFileContent += "sort pubDate desc, title asc\n";
    watchFileContent += "```\n";
    await this.app.vault.modify(watchFile, watchFileContent);
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var PlexWatchlistSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Plex Watchlist Settings" });
    new import_obsidian.Setting(containerEl).setName("RSS Feed URL").setDesc("Paste your Plex RSS feed URL here.").addText(
      (text) => text.setPlaceholder("Enter URL").setValue(this.plugin.settings.feedUrl).onChange(async (value) => {
        this.plugin.settings.feedUrl = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Folder Path").setDesc("Enter the folder path where watch.md will be saved.").addText(
      (text) => text.setPlaceholder("Enter folder path").setValue(this.plugin.settings.folderPath).onChange(async (value) => {
        this.plugin.settings.folderPath = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).addButton((button) => {
      button.setButtonText("Sync Now").setCta().onClick(async () => {
        await this.plugin.checkFeed();
        new Notice("Plex Watchlist synced successfully.");
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
